<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Game on hack(pravj)</title>
    <link>https://pravj.github.io/tags/game/index.xml</link>
    <description>Recent content in Game on hack(pravj)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://pravj.github.io/tags/game/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Development story of puzzl</title>
      <link>https://pravj.github.io/blog/development-story-of-puzzl/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0530</pubDate>
      
      <guid>https://pravj.github.io/blog/development-story-of-puzzl/</guid>
      <description>

&lt;p&gt;Lets start with that old promotion rant I use all the time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should have a look at &lt;a href=&#34;https://github.com/pravj/puzzl&#34;&gt;puzzl&lt;/a&gt;, if you haven&amp;rsquo;t yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;what-this-is-all-about&#34;&gt;What this is all about?&lt;/h3&gt;

&lt;p&gt;This post is about development of a sliding-puzzle game I made recently, named &lt;em&gt;puzzl&lt;/em&gt;. I refer it as an &lt;em&gt;intelligent version&lt;/em&gt; of the classical sliding puzzle game, and I&amp;rsquo;ll explain the reason behind this. Stay awake.&lt;/p&gt;

&lt;figure&gt; &lt;img src=&#34;https://pravj.github.io/images/puzzl.gif&#34;&gt; 
    &lt;figcaption&gt;Puzzl in action&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;for-what-joy&#34;&gt;For What Joy?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, that&amp;rsquo;s the best question. Why did I do that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There &lt;em&gt;is&lt;/em&gt; a force behind everything we do, so the same goes for any new software product we see in the jungle or a new medicine or whatever.&lt;/p&gt;

&lt;p&gt;They all try to solve some problems. A new version of a software has some bugs fixed from the older one and so on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But hey! you can develop a game without such force anytime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Specially, when you are supposed to study for your exams. Tested, &lt;em&gt;rule of thumb&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;exam-time-bamboozlement&#34;&gt;Exam-time bamboozlement&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;session&lt;/em&gt; when your mind&amp;rsquo;s &lt;em&gt;stream&lt;/em&gt; is *grep*ing too many *event*s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You feel like, put this exam thing in left and consider this problem-&lt;em&gt;blah&lt;/em&gt;, because the world needs you. Right now.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s gone after a nice sleep, like hangover. But it may attack you again on the next exam day, depending on your performance in last exam.&lt;/p&gt;

&lt;p&gt;You think about too many things, however some are out of your domain though.&lt;/p&gt;

&lt;p&gt;For example, &lt;em&gt;A bicycle for old aged people&lt;/em&gt;. I found it an actual problem by the way, as I often see them having trouble riding the native big bicycles.&lt;/p&gt;

&lt;p&gt;Then you think that it should run on its own, so you draw a sketch and invest your time in adding solar panels at proper orientation, so that charging is not something to worry about, no matter where the sun is.&lt;/p&gt;

&lt;p&gt;Then you suddenly realize that you&amp;rsquo;re about to transform into &lt;em&gt;Tony Stark&lt;/em&gt;. You&amp;rsquo;re working on a problem which comes under &lt;em&gt;Mechanical Engineering&lt;/em&gt;. And there is no chance you can complete this without either having a degree in it or a girlfriend from that stream. By the way, both the solutions are difficult.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A similar bamboozlement was the reason behind the game &lt;em&gt;puzzl&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was setting up my camp for the mid-term exam of &lt;em&gt;Artificial Intelligence&lt;/em&gt; course. And then I stumbled upon this &lt;em&gt;sliding-puzzle&lt;/em&gt; game thing in book.&lt;/p&gt;

&lt;p&gt;Then I thought, what about a sliding-puzzle game for terminals?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. I was done with further preparation. I even spent the entire exam time divising the &lt;em&gt;scoring mechanism&lt;/em&gt; and &lt;em&gt;logo&lt;/em&gt; for the game. The last page of the solution paper and my low score is the proof.&lt;/p&gt;

&lt;h3 id=&#34;the-problem-statement&#34;&gt;The problem statement&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Sliding-puzzle&lt;/em&gt; games have many variants. I decided to move ahead with the one having a 3x3 board, the &lt;em&gt;8-puzzle&lt;/em&gt;. 8 out of 9 tiles have some numbers on them, one tile is blank.&lt;/p&gt;

&lt;p&gt;All you have to do is, arrange all tiles in a particular order. Lets say, in increasing order with the blank tile being the last one.&lt;/p&gt;

&lt;figure&gt; &lt;img src=&#34;https://pravj.github.io/images/states.jpg&#34;&gt; 
    &lt;figcaption&gt;8 puzzle game states&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This sounds a little easy, taking user inputs, moving the tiles accordingly and checking that whether we are done with the game or not. So, I decided to enhance both the development and playing processes.&lt;/p&gt;

&lt;p&gt;To solve the game in background and track user moves accordingly or give them hints. Poor humans.&lt;/p&gt;

&lt;h3 id=&#34;the-solution&#34;&gt;The solution&lt;/h3&gt;

&lt;p&gt;The solution is pretty simple actually. There is a blank tile in the game board and you can reach to a different configuration by moving that blank tile in atmost 4 directions, according to its current position.&lt;/p&gt;

&lt;p&gt;Now, how do you make a computer solve this, efficiently?&lt;/p&gt;

&lt;p&gt;This can be reduced to a problem where any game board configuration is a &lt;em&gt;node&lt;/em&gt; and you can reach to a &lt;em&gt;node&lt;/em&gt; from its &lt;em&gt;parent node&lt;/em&gt; by applying a &lt;em&gt;successor function&lt;/em&gt;, which is the movement of the blank tile in this case.&lt;/p&gt;

&lt;p&gt;So, this is a &lt;em&gt;graph search problem&lt;/em&gt; now. You have a &lt;em&gt;start state&lt;/em&gt; and you have to reach at a &lt;em&gt;goal state&lt;/em&gt; in minimum steps.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;puzzl&lt;/em&gt;, the algoirthm which solves this &lt;em&gt;graph search problem&lt;/em&gt; is &lt;a href=&#34;http://en.wikipedia.org/wiki/A*_search_algorithm&#34;&gt;A* algorithm&lt;/a&gt;. As of now, it uses the easiest &lt;em&gt;Heuristic Function&lt;/em&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Heuristic_function&#34;&gt;Misplaced Tiles Count&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The auto solving part sounds pretty easy, right? Like a walk while eating a cake.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But there were some other interesting challenges.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;primary-language&#34;&gt;Primary Language&lt;/h3&gt;

&lt;p&gt;I opted for Golang as the primary language of &lt;em&gt;puzzl&lt;/em&gt;, just because &lt;em&gt;I&amp;rsquo;m loving it&lt;/em&gt; and I wanted it to takeoff comparatively faster than other solutions, let&amp;rsquo;s say Python.&lt;/p&gt;

&lt;p&gt;After some work, I started getting ideas of other features and I was happy with my language choice, as Go is the best solution I can think of for them. I&amp;rsquo;ll talk about those features in a while.&lt;/p&gt;

&lt;h3 id=&#34;solvability-of-the-problem&#34;&gt;Solvability of the problem&lt;/h3&gt;

&lt;p&gt;This is one of those interesting parts I faced while making it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not all 8- puzzle game configurations are solvable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, for a 3x3 game board, there are a total of 362880 configurations possible(9!), but only half of them are actually solvable.&lt;/p&gt;

&lt;p&gt;Initially it took me a while to get it that why only some of them are solvable? But after going through &amp;ldquo;&lt;em&gt;Notes on the 15 puzzle&lt;/em&gt;&amp;rdquo; paper by &lt;em&gt;Wm. Woolsey Johnson and William E. Story&lt;/em&gt; it was clear to me.&lt;/p&gt;

&lt;p&gt;Using the &lt;em&gt;Mathematical Induction&lt;/em&gt; on what it was there in the paper, I have a sample game for you. You can spend rest of your life solving this, if you want to.&lt;/p&gt;

&lt;figure&gt; &lt;img src=&#34;https://pravj.github.io/images/unsolvable-game.jpg&#34;&gt; 
    &lt;figcaption&gt;Unsolvable sliding puzzle&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Then I added a package named &lt;a href=&#34;https://github.com/pravj/puzzl/blob/master/scanner/scanner.go&#34;&gt;scanner&lt;/a&gt; in the game, with the help of &amp;ldquo;&lt;em&gt;Analysis of the Sixteen Puzzle&lt;/em&gt;&amp;rdquo;. It makes sure that any game configuration we are using, is really solvable. It uses another for the game, if one is not actually solvable.&lt;/p&gt;

&lt;h3 id=&#34;notification-system&#34;&gt;Notification System&lt;/h3&gt;

&lt;p&gt;And this was the most interesting part. Developing a &lt;em&gt;Real time Notification System&lt;/em&gt; according to the game state.&lt;/p&gt;

&lt;p&gt;When I was done with writing the auto-solving background process for the game, I noticed that sometimes it takes a while to solve from the initial game configuration.&lt;/p&gt;

&lt;p&gt;For example, the hardest game configuration is solvable in 31 moves. So, when the game is solving it, it doesn&amp;rsquo;t properly respond to user inputs.&lt;/p&gt;

&lt;p&gt;It won&amp;rsquo;t respond in this way because the control flow architecture is &lt;em&gt;Synchronous&lt;/em&gt; now. It means that firstoff the game will solve itself in background and then stars accepting user inputs.&lt;/p&gt;

&lt;p&gt;And this goes worse when the game is solving itself on each move because user input was wrong. A serious problem it was.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here comes the concurrency primitives of Golang.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Concurrent programming is the beauty in Go. The language comes with built-in weapons, &lt;em&gt;goroutines&lt;/em&gt; and &lt;em&gt;channels&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The solution works like this, we have to change the control flow architecture into &lt;em&gt;Asynchronous&lt;/em&gt; mode. Where the game would be notifying us that &lt;em&gt;OK, now I&amp;rsquo;m done with solving and you can give any input&lt;/em&gt;, and avoiding all user inputs gracefully till then without a crash.&lt;/p&gt;

&lt;p&gt;And this can be used in many other aspects, notifying on a particular internal event. Like &lt;em&gt;the game is complete&lt;/em&gt;, &lt;em&gt;you just did a right/wrong move&lt;/em&gt;, &lt;em&gt;there are no hints left&lt;/em&gt; etc.&lt;/p&gt;

&lt;p&gt;There are two &lt;em&gt;goroutines&lt;/em&gt;, one for &lt;a href=&#34;https://github.com/pravj/puzzl/blob/master/surface/surface.go#L406-L417&#34;&gt;handling the notification events&lt;/a&gt; and another for &lt;a href=&#34;https://github.com/pravj/puzzl/blob/master/surface/surface.go#L406-L417&#34;&gt;solving the game in background&lt;/a&gt;, both are non-blocking in nature to other routines like &lt;em&gt;user inputs&lt;/em&gt;, &lt;em&gt;game display&lt;/em&gt; etc. A &lt;em&gt;channel&lt;/em&gt; named &lt;a href=&#34;https://github.com/pravj/puzzl/blob/master/notification/notification.go#L19&#34;&gt;Tunnel&lt;/a&gt; was the messenger for these &lt;em&gt;goroutines&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt; &lt;img src=&#34;https://pravj.github.io/images/architecture.jpg&#34;&gt; 
    &lt;figcaption&gt;Asynchronous Gouroutines Architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is like feeding each other. Best friends forever.&lt;/p&gt;

&lt;h3 id=&#34;game-interface&#34;&gt;Game Interface&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;http://en.wikipedia.org/wiki/Box-drawing_character&#34;&gt;Box-drawing characters&lt;/a&gt;, the best old way to develop text based user interfaces. And thanks to &lt;a href=&#34;https://github.com/nsf/termbox-go&#34;&gt;termbox-go&lt;/a&gt;, an awesome library for such interface development in Golang.&lt;/p&gt;

&lt;h3 id=&#34;arxiv-submission&#34;&gt;arXiv submission&lt;/h3&gt;

&lt;p&gt;I loved working on it so much that I even framed its development in shape of a research paper, sort of. It&amp;rsquo;s available on the arXiv digital library, here &lt;a href=&#34;http://arxiv.org/abs/1503.08345&#34;&gt;arxiv-1503.08345&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang&amp;rsquo;s concurrency primitives.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not in LaTeX, so the arXiv stamp is absent in PDF format there. They replied that they don&amp;rsquo;t have any technique yet to stamp other formats. I&amp;rsquo;ll probably port it in LaTeX one day.&lt;/p&gt;

&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jstor.org/stable/pdf/2369492.pdf?acceptTC=true&#34;&gt;Notes on the 15 puzzle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kevingong.com/Math/SixteenPuzzle.html&#34;&gt;Analysis of the Sixteen Puzzle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ai-php.com/wp-content/uploads/2013/12/AI8pzzle.jpg&#34;&gt;ai-php.com&lt;/a&gt; for the 8-puzzle game states image&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://captnemo.in/&#34;&gt;Abhay Rana&lt;/a&gt; for teaching me what &lt;em&gt;For What Joy&lt;/em&gt; is. #FWJ?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;behind-the-scene&#34;&gt;Behind the scene&lt;/h3&gt;

&lt;p&gt;I framed all this story for you, the truth is something else.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Guess what? It&amp;rsquo;s my exam-time again that made me write this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The source code for &lt;em&gt;puzzl&lt;/em&gt; is on &lt;a href=&#34;https://github.com/pravj/puzzl&#34;&gt;GitHub&lt;/a&gt;. Do whatever you want, just respect licensing and other respectful things.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The git-game Write-up</title>
      <link>https://pravj.github.io/blog/the-git-game-writeup/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0530</pubDate>
      
      <guid>https://pravj.github.io/blog/the-git-game-writeup/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Spoiler Alert&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should go and check this out, &lt;a href=&#34;https://github.com/hgarc014/git-game&#34;&gt;git-game&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a nice little &lt;em&gt;complete-a-task-and-upgrade-level&lt;/em&gt; type of game layered on top of Git.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;It is a terminal game designed to test your knowledge of git commands. Each level in the game is a task to perform on this repo. Once you perform that task, you will be given your next task. There are a total of ten levels, each one harder than last!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I saw the reference to this game floating around in my GitHub feed yesterday. The concept is awesome as there are already &lt;a href=&#34;http://pcottle.github.io/learnGitBranching/&#34;&gt;many&lt;/a&gt; online tutorial courses on the Internet that uses interactive &lt;em&gt;learning-with-doing&lt;/em&gt; methods for Git.&lt;/p&gt;

&lt;p&gt;According to the repository, I started the adventure with cloning the repository using &lt;code&gt;git clone git@github.com:hgarc014/git-game.git&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;default branch&lt;/em&gt; was &lt;em&gt;master&lt;/em&gt; and there were only two files in repository&amp;rsquo;s &lt;em&gt;working directory&lt;/em&gt;, README.md and LICENSE.&lt;/p&gt;

&lt;p&gt;I started with the README.md file and &lt;code&gt;cat README.md&lt;/code&gt; revealed all its content.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should always check the README.md file for your next clue!&lt;/p&gt;

&lt;p&gt;Your first task is to checkout the commit whose commit message is the answer to this question:&lt;/p&gt;

&lt;p&gt;When a programmer is born, what is the first thing he/she learns to say?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well! a programmer is also a boy/girl, so first thing they do is &lt;em&gt;cry&lt;/em&gt; but in the current context that thing will be &lt;em&gt;Hello, World!&lt;/em&gt; :grinning:&lt;/p&gt;

&lt;p&gt;Now I had to find the commit whose commit message was &lt;em&gt;Hello World&lt;/em&gt;, so the command &lt;code&gt;git log --graph --online&lt;/code&gt; resulted this commit history.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;* 25bfa08 added information for people that don&amp;rsquo;t know git&lt;/p&gt;

&lt;p&gt;*   27e9786 Merge pull request #6 from riqpe/master&lt;/p&gt;

&lt;p&gt;|&lt;/p&gt;

&lt;p&gt;| * 3893960 Corrected description of difficulty progression&lt;/p&gt;

&lt;p&gt;|/&lt;/p&gt;

&lt;p&gt;* bc9641f updated README&lt;/p&gt;

&lt;p&gt;* 9b9380b Hello World!&lt;/p&gt;

&lt;p&gt;* 8cafb7c Initial commit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Can you see the &lt;em&gt;Hello World! commit&lt;/em&gt; now? Yeah! we can represent it by HEAD~3.
As that commit is &lt;em&gt;directly at level 3&lt;/em&gt; or we can say &lt;em&gt;great-grandparent&lt;/em&gt; of the HEAD commit.&lt;/p&gt;

&lt;p&gt;So all I needed to do was the command &lt;code&gt;git checkout HEAD~3&lt;/code&gt;, doing so we&amp;rsquo;re now done with the first task.&lt;/p&gt;

&lt;p&gt;After completing the first task when the HEAD is at that particular commit, the README.md file was ready with its new task.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git-game&lt;/p&gt;

&lt;p&gt;========&lt;/p&gt;

&lt;p&gt;Hello World!&lt;/p&gt;

&lt;p&gt;It looks like you have some knowledge about traversing commits!&lt;/p&gt;

&lt;p&gt;Well, let&amp;rsquo;s get this party started!&lt;/p&gt;

&lt;p&gt;We want to get to a branch whose name is the answer to this riddle:&lt;/p&gt;

&lt;p&gt;I am a creature that is smaller than man, but many times more in number.&lt;/p&gt;

&lt;p&gt;In code, my appearance can be subtle and no matter where I am found, I am unwanted.&lt;/p&gt;

&lt;p&gt;What am I?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Easy Peasy? Yeah, the answer is &lt;em&gt;bug&lt;/em&gt; obviously, so lets fly to same &lt;em&gt;branch&lt;/em&gt; using the &lt;code&gt;git checkout bug&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;In this &lt;em&gt;branch&lt;/em&gt;&amp;rsquo;s &lt;em&gt;working directory&lt;/em&gt; there were two extra files, &lt;em&gt;cool.cpp&lt;/em&gt; and &lt;em&gt;remember&lt;/em&gt; and the README.md was saying that :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git-game&lt;/p&gt;

&lt;p&gt;========&lt;/p&gt;

&lt;p&gt;Congratulations, it looks like you found the &amp;ldquo;bug.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;When you work with other programmers on the same project, bugs are bound to appear.&lt;/p&gt;

&lt;p&gt;One way to create bugs is by changing code that you did not write without understanding what the code is doing.&lt;/p&gt;

&lt;p&gt;Sometimes we like to blame others for introducing bugs in our code.&lt;/p&gt;

&lt;p&gt;Think you can find out who introduced a bug into our file cool.cpp?&lt;/p&gt;

&lt;p&gt;We think he had something to do with the development of git.&lt;/p&gt;

&lt;p&gt;And from what we hear he also made a branch under his name.&lt;/p&gt;

&lt;p&gt;Checkout to that branch after you find out who the culprit is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It says that there is a bug in the file &lt;em&gt;cool.cpp&lt;/em&gt;, lets see.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

int main()
{
   string mesg = &amp;quot;Hello! Who are you?&amp;quot;;
   string input;
   cout &amp;lt;&amp;lt; mesg &amp;lt;&amp;lt; endl;
   cin &amp;gt;&amp;gt; input;
   cout &amp;lt;&amp;lt; &amp;quot;Loops are fun!&amp;quot; &amp;lt;&amp;lt; endl;
   while(1);
   string reply = &amp;quot;Well, &amp;quot; + input + &amp;quot;, we hope you are having fun with our git-game!&amp;quot;;
   cout &amp;lt;&amp;lt; reply &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah! there is one; the &lt;em&gt;while loop&lt;/em&gt; will refuse the program from terminating.&lt;/p&gt;

&lt;p&gt;So, who did this? Well! that&amp;rsquo;s what we have to answer now.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;git blame - Helps you finding who committed what.&lt;/p&gt;

&lt;p&gt;Show what revision and author last modified each line of a file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;git blame cool.cpp&lt;/code&gt; is here for our rescue. It says that :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ce59bbfd (Henry Garcia      2014-12-08 18:22:35 -0800 10)    cin &amp;gt;&amp;gt; input;
3922a6d8 (LinusTorvalds2014 2014-12-09 12:37:10 -0800 11)    cout &amp;lt;&amp;lt; &amp;quot;Loops are fun!&amp;quot; &amp;lt;&amp;lt; endl;
3922a6d8 (LinusTorvalds2014 2014-12-09 12:37:10 -0800 12)    while(1);
ce59bbfd (Henry Garcia      2014-12-08 18:22:35 -0800 13)    string reply = &amp;quot;Well, &amp;quot; + input + &amp;quot;, ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Damn! someone with a similar name to the great &lt;em&gt;Linus Torvalds&lt;/em&gt; is the culprit, he wrote that buggy line in the file. OK, lets move to his &lt;em&gt;branch&lt;/em&gt; as the README says, using &lt;code&gt;git checkout LinusTorvalds2014&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;This time the README.md file was not explicitly directing anywhere.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git-game
========

Looks like you found the branch of the evil Mastermind.
Things may start to get a little more challenging...

The next clue you are looking for --
   is in a file you choose to ignore!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I was doing this I thought may be it&amp;rsquo;s pointing to that useless file named &lt;em&gt;remember&lt;/em&gt; which was back there in the branch &lt;em&gt;bug&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So I &lt;em&gt;checked-out&lt;/em&gt; again to the branch &lt;em&gt;bug&lt;/em&gt; and tried to find any clue in the file &lt;em&gt;remember&lt;/em&gt;. Its content looked like RSA Public keys to me.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cweJIY8GOo18Usi5ykA4nmhBR0h 6mMpyy4nFY71IhgjGGr0rkY3uE tVTo j5XlwgLZZ PpRK Pwbnd7Z4bpQWc6sU700xfLTI63FbD DsKCQbUKG KS02qfurxMJ3mHHD8f6VhFUmY2rPD NjznQ8mnQvlNwAR1QsLDK Zjl1kGbWQBeGoOBwVMfa790ATCNg fR OLPA0hi7OW N4jUN26mBIwQVhVtteDSDSr OVfhvUwb7ydODX7R2no xxTmrD5IFUXIB8dDhR lpSFaRcbF2up wrWA J2acmA28c2 NhE Bqj7ntV67GTHpVBSwO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I gave up after scrolling through the lengthy &lt;em&gt;remember&lt;/em&gt; file and &lt;em&gt;checked-out&lt;/em&gt; again to the branch &lt;em&gt;LinusTorvalds2014&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I have a strange habit to use &lt;code&gt;ls -a&lt;/code&gt; instead of &lt;code&gt;ls&lt;/code&gt; to list content of a directory so I did it and Boy! there it was, hiding all this time.&lt;/p&gt;

&lt;p&gt;Guess what? there was a file named &lt;em&gt;.gitignore&lt;/em&gt; and it said :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# welcome to the ignore file!!

# This file is hidden by default,
# but did you know you have some branches that aren&#39;t shown to you,
# when you check the list of branches?
#
# For your next clue...
# Which abstract data type tends to implement sets and maps??
# The answer is the same answer to this riddle:
#
#   I am both mother and father.
#   I am seldom still
#   yet I never wander.
#   I never birth nor nurse.
#
#   What am I?
#
# Afterwards... well, you
# know, checkout to the answer.

*.rem
a.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time the answer of riddle is &lt;em&gt;Tree&lt;/em&gt;, simple. Don&amp;rsquo;t you know? You can &lt;em&gt;google&lt;/em&gt; it any time, I did the same. :wink:&lt;/p&gt;

&lt;p&gt;So the next thing to do was, &lt;code&gt;git checkout tree&lt;/code&gt; and the README.md file there said :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git-game
========

Welcome to the &amp;quot;tree&amp;quot; branch.
Looks like good ol&#39; Linus modified the &amp;quot;nextclue_input.cpp&amp;quot; file.
Normally, when ran with the shell script &amp;quot;outputclue.sh&amp;quot;, the &amp;quot;nextclue_input.cpp&amp;quot; file would give us the next hint.

Maybe, you should try running the shell script with the &amp;quot;nextclue_input.cpp&amp;quot; file and see what happens...

You can run the script by running the command &amp;quot;./outputclue.sh FILE&amp;quot; .
If you are on Windows, it&#39;s okey to use `git-bash` that is installed with [msysgit](https://msysgit.github.io/).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On executing the shell script with the &lt;em&gt;nextclue_input.cpp&lt;/em&gt;, printed something on the STDOUT.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Linus has been here...
I love messing with these amateur programmers!!
If you want some real fun, then you should try resolving a conflict between this branch (tree) and code4life.
I introduced a little bug that you should fix in the conflict. &amp;gt;:)
After you merge these 2 files you should run the shell script again!!

Good Luck!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The file &lt;em&gt;outputclue.sh&lt;/em&gt; is a &lt;em&gt;bash&lt;/em&gt; source file and matches the &lt;em&gt;md5sum&lt;/em&gt; of each word in the &lt;em&gt;nextclue_input.cpp&lt;/em&gt; to a local &lt;em&gt;checksum&lt;/em&gt; variable named &lt;em&gt;bug&lt;/em&gt;.
It keeps asking to fix &lt;em&gt;merge conflicts&lt;/em&gt; until the word matching that checksum is present in the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
if [ -z $1 ]; then
  echo &amp;quot;well, someone didn&#39;t want to run the script with a file...&amp;quot;;
  exit;
fi

file=$1
bug=7c85d987a917c2a555d1391426978f05
mesg=&amp;quot;Linus has been here...\nI love messing with these amateur programmers!!\nIf you want some real fun, then you should try resolving a conflict between this branch (tree) and code4life.\nI introduced a little bug that you should fix in the conflict. &amp;gt;:)\nAfter you merge these 2 files you should run the shell script again!!\n\nGood Luck!!!&amp;quot;
merges=$(git log --format=%h --merges | head -1)
csum=&amp;quot;md5sum&amp;quot;
if [ $(echo &amp;quot;$OSTYPE&amp;quot; | grep darwin) ];then
    csum=&amp;quot;md5&amp;quot;
fi

if [ &amp;quot;$file&amp;quot; = &amp;quot;nextclue_input.cpp&amp;quot; ];then
  if [ ${merges} ]; then
    while read p; do
      for w in $p;do
        if [ `echo $w | $csum | awk &#39;{print $1}&#39;` = $bug ];then
          echo -e $mesg;
          exit;
        fi;
      done;
    done &amp;lt; $file ;
    echo -e &amp;quot;Well, congratulations!! You fixed my conflict!!\nIf you would like to continue, then you should checkout to the $(echo 90mP8ouQHsNe | tr -d &#39;0-9A-Z&#39;) branch!!\n&amp;quot; ;
   else
     echo -e $mesg;
     exit;
   fi;
else
  echo &amp;quot;Looks like you passed in the wrong file&amp;quot;;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I saw that the &lt;em&gt;nextclue_input.cpp&lt;/em&gt; file was having a line with an &lt;em&gt;infinite while loop&lt;/em&gt; and my guess was right, the &lt;em&gt;checksum&lt;/em&gt; variable matched the &lt;em&gt;md5sum&lt;/em&gt; of the term &lt;em&gt;while(1);&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So to fix the &lt;em&gt;merge conflict&lt;/em&gt;, I did &lt;code&gt;git merge code4life&lt;/code&gt; and removed the faulty line; It worked like a charm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Well, congratulations!! You fixed my conflict!!
If you would like to continue, then you should checkout to the mouse branch!!
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;BTW! It was way more easy. As the answer branch was, mouse.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ echo 90mP8ouQHsNe | tr -d &#39;0-9A-Z&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When I &lt;em&gt;checked-out&lt;/em&gt; to the branch &lt;em&gt;mouse&lt;/em&gt;, it said :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nextclue_input.cpp: needs merge
error: you need to resolve your current index first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you can get away without merging by &lt;em&gt;stashing the changes&lt;/em&gt;, I did this with &lt;code&gt;git add nextclue_input.cpp &amp;amp;&amp;amp; git stash&lt;/code&gt;.
Now the README.md file in branch &lt;em&gt;mouse&lt;/em&gt; said :&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h1 id=&#34;git-game&#34;&gt;git-game&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looks like you resolved your conflict and found our branch, congrats!!&lt;/p&gt;

&lt;p&gt;Hmm&amp;hellip;it seems this branch has a file that was seen before in another branch.
Do you &amp;ldquo;remember&amp;rdquo; what it is?
I think this file has something to do with the next clue, but it seems to be very ugly looking.
Maybe if we compare the &amp;ldquo;diff&amp;rdquo;erences between this file and the file from before we&amp;rsquo;ll know where to go next&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Yeah! I do remember that the file *remember* was there in the branch *bug* as I wasted 10 minutes on it.

I did ```git diff mouse bug -- remember``` to see the difference between these two files accross branches and the difference in the files was this one line :

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-Sn The next clue is: YtrydjKsYqebDoI3h bTINUeV6 pTVY8jnK2re HRwwNy25Ps6 u0YChCo5Jtw N3xkH3G nx aGo6yQTW RVZMsf3xk tBL0sG9GAR HQbyGYdqs i6dx1fyIPGJVci
+Sn In a branch named: Henry YtrydjKsYqebDoI3h bTINUeV6 pTVY8jnK2re HRwwNy25Ps6 u0YChCo5Jtw N3xkH3G nx aGo6yQTW RVZMsf3xk tBL0sG9GAR HQbyGYdqs i6dx1fy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
So, the next *branch* to move was *Henry*, but ```git checkout Henry``` was a trap.

On *checking-out* it said, *You are in &#39;detached HEAD&#39; state*; means we were not in a *branch* but *tag*. The README.md file was saying the same.

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;git-game-1&#34;&gt;git-game&lt;/h1&gt;

&lt;p&gt;Welcome to my Tag!!!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re looking for my branch then you have gone the wrong way!!&lt;/p&gt;

&lt;p&gt;How do you checkout to a branch that has the same name as a tag???
Deal with the tag first!!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
The problem was that there was a *branch* with exactly same name as a tag, *Henry*.
So I *renamed* the *tag*, because *who knows when you&#39;re gonna need something?*

```git tag Henry-v0.1 Henry &amp;amp;&amp;amp; git tag -d Henry``` made a new tag pointing to old&#39;s commit and deleted the old one.

Now after *checking-out* to the branch *Henry*, the README said :

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;git-game-2&#34;&gt;git-game&lt;/h1&gt;

&lt;p&gt;Welcome!! It looks like you made it to my Branch!!!
Generally you want to refrain from making tags the same name as branches, unless you have a good reason.
The tag is more like the stable release.
While the branch is more like the in progress feature, which will be added soon.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re almost done!! Excited?? Hope you are! You have one more thing to do!&lt;/p&gt;

&lt;p&gt;Now its time to update the master branch, updating is really useful when you fork a repository and your forked repo starts to get behind on commits. The repository to update from is: &lt;a href=&#34;https://github.com/drami025/git-game.git&#34;&gt;https://github.com/drami025/git-game.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t cheat!!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
So, according to the task, to update the *master branch* I *checked-out* to it.

With ```git remote add updater git@github.com:drami025/git-game.git``` command, I added the new *remote* to update from, as the README.md said.

Then a simple ```git pull updater master``` did rest of the work and the *master branch* was equal with the new *remote*, all updated. \o/.

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;git-game-finish-line&#34;&gt;Git Game Finish Line&lt;/h1&gt;

&lt;h1 id=&#34;if-you-did-not-fork-this-repository-from-the-terminal-then-we-are-disappointed-in-you&#34;&gt;If you did not fork this repository from the terminal, then we are disappointed in you!!&lt;/h1&gt;

&lt;p&gt;However, if you did, then great Job!!
You completed our Git Game!
```&lt;/p&gt;

&lt;p&gt;They have also implemented an &lt;a href=&#34;http://openbadges.org/&#34;&gt;Open-Badge&lt;/a&gt; for this, I got one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Finally, it&amp;rsquo;s complete. And this Write-up too.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m feeling pain in my fingers now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;behind-the-scene&#34;&gt;Behind the scene :&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Each level was somewhat harder than the previous one but overall it wasn&amp;rsquo;t.&lt;/li&gt;
&lt;li&gt;Yeah! I completed all tasks &lt;em&gt;twice&lt;/em&gt;, the extra one while writing this Write-up.&lt;/li&gt;
&lt;li&gt;It took me almost 30 minutes to complete all tasks but 2 hours to write this.&lt;/li&gt;
&lt;li&gt;Today, it&amp;rsquo;s an awesome sunny, winter day here. :sunny:&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>termping : &lt;3 &#43; Node.js &#43; Streams &#43; CoffeeScript</title>
      <link>https://pravj.github.io/blog/termping/</link>
      <pubDate>Sun, 27 Jul 2014 00:00:00 +0530</pubDate>
      
      <guid>https://pravj.github.io/blog/termping/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;You should have a look at &lt;a href=&#34;https://github.com/pravj/termping.git&#34;&gt;termping&lt;/a&gt;, if you haven&amp;rsquo;t yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;what-s-the-fuss-about&#34;&gt;What&amp;rsquo;s the fuss about&lt;/h3&gt;

&lt;p&gt;This Blog is all about development of a game(kind of) &lt;a href=&#34;https://github.com/pravj/termping.git&#34;&gt;termping&lt;/a&gt;, which is a prototype of one of the oldest video game &lt;a href=&#34;https://en.wikipedia.org/wiki/Pong&#34;&gt;Pong&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But this prototype runs in your system&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Computer_terminal&#34;&gt;terminal&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt; &lt;img src=&#34;https://pravj.github.io/images/termping.gif&#34;&gt;
    &lt;figcaption&gt;termping in action&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;emergence&#34;&gt;Emergence&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;One thing that I just feel, I am getting good at is
&lt;strong&gt;&amp;ldquo;reading and understanding other people&amp;rsquo;s code&amp;rdquo;&lt;/strong&gt; &lt;em&gt;&amp;#35;notprasingmyself&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this summer I have explored unlimited repository out there on &lt;a href=&#34;https://github.com/pravj&#34;&gt;GitHub&lt;/a&gt;. some for solving any kind of issues I was facing in using them or some for just sake of learning anything new, be it any new language(Ruby) or a new field(Vim) for me.&lt;/p&gt;

&lt;p&gt;One interesting recap is that I was working on a project for my team(&lt;a href=&#34;https://twitter.com/sdslabs&#34;&gt;SDSLabs&lt;/a&gt;) and I was using a ruby library as HTTP client, &lt;a href=&#34;https://github.com/rest-client/rest-client&#34;&gt;Rest-Client&lt;/a&gt;. I started facing issue(obviously) as I was new to Ruby. So I started reading code of Rest-Client just to take a look that what are the ingredients and their quantity in this library.&lt;/p&gt;

&lt;p&gt;finally I completed Rest-Client with a better understanding that solved all my issues with it and gave me introduction to a new field, which is :
&amp;gt; How does HTTP and REST clients works&lt;/p&gt;

&lt;p&gt;Also while learning about the large world of &lt;strong&gt;&lt;a href=&#34;https://github.com/pravj/dotfiles/tree/learning/vim&#34;&gt;Vim&lt;/a&gt;&lt;/strong&gt;, I started developing on a rough idea in my mind. which was to develop a Pong like game, playable in Vim editor itself. I tried it, under the name of &lt;a href=&#34;https://github.com/pravj/vingvong&#34;&gt;vingvong.&lt;/a&gt;. But I was unable to complete it because Vim does not support Asynchronous subprocesses, so I stopped the development.&lt;/p&gt;

&lt;p&gt;May be you have any other way of implementing same or I&amp;rsquo;m wrong somewhere. If so, please let &lt;a href=&#34;https://twitter.com/hackpravj&#34;&gt;me&lt;/a&gt; know.&lt;/p&gt;

&lt;p&gt;In the same mission, one day I was going through project &lt;a href=&#34;https://github.com/visionmedia/nshell&#34;&gt;nshell&lt;/a&gt; of &lt;em&gt;one and only&lt;/em&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/visionmedia&#34;&gt;visionmedia&lt;/a&gt;&lt;/strong&gt;. I selected this repository because I recently developed an interest in &lt;a href=&#34;https://github.com/pravj/dotfiles&#34;&gt;bash, shells and dotfiles management&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I saw, he was using &lt;a href=&#34;http://nodejs.org/docs/latest/api/stream.html#stream_stream&#34;&gt;Stream&lt;/a&gt; in nshell development. I googled about streams and found many resources, this includes &lt;a href=&#34;http://nodejs.org/docs/latest/api/stream.html&#34;&gt;official stream docs&lt;/a&gt; and &lt;a href=&#34;https://github.com/substack/stream-handbook&#34;&gt;stream-handbook&lt;/a&gt; and many others.&lt;/p&gt;

&lt;p&gt;Before that day, I have seen many people starring the &lt;em&gt;stream-handbook&lt;/em&gt; in my GitHub feed. But I was like &lt;em&gt;this thing does not belongs to me, right now&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But that day I opened &lt;em&gt;stream-handbook&lt;/em&gt; with a motive to learn something. I started reading it and found that &lt;em&gt;Streams&lt;/em&gt; is a nice topic to learn.&lt;/p&gt;

&lt;p&gt;Suddenly my mind searched something from it&amp;rsquo;s index and showed me result in form of an idea. It was :
&amp;gt; Why don&amp;rsquo;t you just restart that Pingpong thing with this Stream ?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That&amp;rsquo;s all I wanted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;development&#34;&gt;Development&lt;/h3&gt;

&lt;p&gt;when I started thinking about Developing, shaping it as a &lt;strong&gt;Node Module&lt;/strong&gt; was the only and right option. I knew already that writing a Node Module in &lt;strong&gt;CoffeeScript&lt;/strong&gt; is both fancy(for world) and easy(for me).&lt;/p&gt;

&lt;p&gt;There was another reason for Choosing CoffeeScript, my experience in CoffeeScript was only limited to write &lt;a href=&#34;https://gist.github.com/pravj/2f500607d0aa1bae26a2&#34;&gt;some&lt;/a&gt; hubot scripts for customizing internal communication at &lt;a href=&#34;https://github.com/sdslabs&#34;&gt;SDSLabs.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was a cool opportunity to learn and do more things in CoffeeScript, so finally I was like :
&amp;gt; OK, lets move with CoffeeScript.&lt;/p&gt;

&lt;p&gt;One coolest thing is that for CoffeeScript, I have only used &lt;a href=&#34;http://arcturo.github.io/library/coffeescript/&#34;&gt;The Little Book on CoffeeScript&lt;/a&gt;, no StackOverflow here.&lt;/p&gt;

&lt;p&gt;The current version of &lt;strong&gt;termping&lt;/strong&gt; is open-sourced at &lt;a href=&#34;https://github.com/pravj/termping&#34;&gt;GitHub&lt;/a&gt;, feel free to contribute to it.&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;ll try to explain Source Code of &lt;strong&gt;termping.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is the current file structure of the repository, once you browse it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|__.npmignore
|__src
| |__objects.coffee
| |__game.coffee
| |__movement.coffee
| |__status.coffee
| |__source.coffee
|__Cakefile
|__bin
| |__termping
|__package.json
|__.gitignore
|__README.md
|__docs
| |__termping.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PS : this tree structure is generated from &lt;a href=&#34;https://github.com/pravj/dotfiles/blob/learning/bin/treegen&#34;&gt;treegen&lt;/a&gt;, my own attempt as the alternative of the great &lt;code&gt;tree&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;you can see, main things are inside &lt;code&gt;/src&lt;/code&gt; directory.&lt;/p&gt;

&lt;h4 id=&#34;1-objects-coffee&#34;&gt;1. objects.coffee&lt;/h4&gt;

&lt;p&gt;Object class keeps the game objects, including &lt;em&gt;ball&lt;/em&gt;, &lt;em&gt;paddle&lt;/em&gt; and &lt;em&gt;data&lt;/em&gt; to be rendered on screen. It also helps to populate the data initially according to terminal size.&lt;/p&gt;

&lt;h4 id=&#34;2-game-coffee&#34;&gt;2. game.coffee&lt;/h4&gt;

&lt;p&gt;Game class combines all available things at one place and makes it possible to play the game. It also invoke things in other classes on some particular events like &lt;em&gt;left&lt;/em&gt;/&lt;em&gt;right&lt;/em&gt; or &lt;em&gt;SpaceBar&lt;/em&gt; key press, that enable pause/resume or movement of paddle.&lt;/p&gt;

&lt;h4 id=&#34;3-movement-coffee&#34;&gt;3. movement.coffee&lt;/h4&gt;

&lt;p&gt;Movement class handles all movement related things. Ex. moving of user&amp;rsquo;s paddle, movement of ball, movement of computer&amp;rsquo;s paddle and one most useful thing &lt;em&gt;Collision Detection&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;4-status-coffee&#34;&gt;4. status.coffee&lt;/h4&gt;

&lt;p&gt;status.coffee carries all variable and their values that different classes use throughout the game. which includes, velocity of ball, paddle positions, ball positions, state of game etc.&lt;/p&gt;

&lt;h4 id=&#34;5-source-coffee&#34;&gt;5. source.coffee&lt;/h4&gt;

&lt;p&gt;Source class is leading character in the movie. This is the place where all that Stream thing shows the magic. What it does is to &lt;strong&gt;pipe&lt;/strong&gt; the data to the &lt;strong&gt;stdout&lt;/strong&gt; that is to be rendered on screen. That&amp;rsquo;s why I named it as Source. Other classes just work together and periodically update the data.&lt;/p&gt;

&lt;h3 id=&#34;learning&#34;&gt;Learning&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;finally the thing is that, was this all worth doing ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Answer is : &lt;strong&gt;Obviously, Yes. It&amp;rsquo;s always good to be pragmatic.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now I feel as good with &lt;strong&gt;CoffeeScript&lt;/strong&gt; as I feel with my love, &lt;strong&gt;Python&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;as the Book says, CoffeeScript is a little language, but it&amp;rsquo;s pretty cool one.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Finally I have a &lt;a href=&#34;https://www.npmjs.org/package/termping&#34;&gt;NPM Module&lt;/a&gt; under my name \m/.

&lt;ul&gt;
&lt;li&gt;I have completed things in form of NPM modules 2-3 times but never published them, because I developed them for internal/local use only.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I continued working on it, because I just wanted to complete that un-complete &lt;a href=&#34;https://github.com/pravj/vingvong&#34;&gt;vingvong&lt;/a&gt; thing.

&lt;ul&gt;
&lt;li&gt;Finally now, the revenge has been taken, &lt;strong&gt;Yo&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It was the motive to complete it, that&amp;rsquo;s why I have added that ♥ in starting, instead of adding it in last.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;extra-learning&#34;&gt;Extra Learning&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Extra learning just means, things that I explored while developing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;termping&lt;/strong&gt; is entirely developed in &lt;strong&gt;Vim&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;you can smell it&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; repo in &lt;strong&gt;termping&lt;/strong&gt; uses a pattern in it&amp;rsquo;s &lt;a href=&#34;https://github.com/pravj/termping/commits/master&#34;&gt;commit messages&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Commit messages uses a Prefix with them, which is&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;add&lt;/strong&gt; : when your commit is adding something new to the repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;change&lt;/strong&gt; : when your commit is changing something that already exists.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;remove&lt;/strong&gt; : when your commit is removing things from the repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fix&lt;/strong&gt; : when commit fixes something wrong with repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update&lt;/strong&gt; : when commit updates version info about repository.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Commit messages respects everything &lt;a href=&#34;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&#34;&gt;suggested&lt;/a&gt; by the great man of &lt;em&gt;Vim World&lt;/em&gt;, &lt;a href=&#34;https://github.com/tpope&#34;&gt;Tim Pope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contribution&#34;&gt;Contribution&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;termping&lt;/strong&gt; is still not complete, what you can contribute is :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A scoring thing, that counts score and decide winner when one player reach at score limit.&lt;/li&gt;
&lt;li&gt;A level thing, that divides the game in parts depending on level of difficulty.&lt;/li&gt;
&lt;li&gt;Feel free to open any &lt;a href=&#34;https://github.com/pravj/termping/issues&#34;&gt;issue&lt;/a&gt; or &lt;a href=&#34;https://github.com/pravj/termping/pulls&#34;&gt;Pull requests&lt;/a&gt; with a feature you want there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am not directly writing any more code to it right now, because I have to get involved with some other necessary things, but I will try to helps anyone interested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It was a great journey so far, with nice learning experience.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>