<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed Systems on hack(pravj)</title>
    <link>https://pravj.github.io/tags/distributed-systems/</link>
    <description>Recent content in Distributed Systems on hack(pravj)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Sep 2015 20:33:29 +0300</lastBuildDate>
    
	<atom:link href="https://pravj.github.io/tags/distributed-systems/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding RPCs - Part II</title>
      <link>https://pravj.github.io/articles/understanding-rpcs-partii/</link>
      <pubDate>Thu, 24 Sep 2015 20:33:29 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/understanding-rpcs-partii/</guid>
      <description>In the previous post, we introduced remote procedure calls and their use within a distributed system. In this post, we are going to dive deep into the concept of semantics - first in the context of distributed systems in general and then discuss various RPC semantics.
Semantics We&amp;rsquo;re now going to briefly talk about one of the most important aspects in a distributed systems - semantics. What do you mean by semantics?</description>
    </item>
    
    <item>
      <title>Understanding RPCs - Part I</title>
      <link>https://pravj.github.io/articles/understanding-rpcs/</link>
      <pubDate>Wed, 23 Sep 2015 20:33:29 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/understanding-rpcs/</guid>
      <description>Having looked at a distributed system i.e the domain name system in the previous post, lets turn our attention to something more fundamental. In this blog post, we are going to start diving deeper into one of the basic blocks of Distributed Systems - Remote Procedure Calls or RPCs.
The paper that we&amp;rsquo;re going to be looking at today is authored by the duo of Nelson and Birell who were the first set of people to build an RPC implementation for their work at Xerox PARC.</description>
    </item>
    
    <item>
      <title>The Domain Name System</title>
      <link>https://pravj.github.io/articles/the-domain-name-system/</link>
      <pubDate>Fri, 18 Sep 2015 20:33:29 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/the-domain-name-system/</guid>
      <description>One of the classes that I&amp;rsquo;ve taken this semester is Advanced Distributed Systems. The course is primarily a research seminar wherein the students are required to read a couple of research topics for each class and participate in a two hour discussion which is guided by the professor. My goal in these series of blog posts is to summarize the papers in an approchable manner primarily to test my own understanding of the topic.</description>
    </item>
    
    <item>
      <title>The SWIM Membership Protocol</title>
      <link>https://pravj.github.io/articles/swim/</link>
      <pubDate>Fri, 13 Feb 2015 12:42:49 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/swim/</guid>
      <description>Let&amp;rsquo;s say that you asked to build a distributed database similar to Cassandra. Your storage system will store and process large amounts of data running on a huge number of commodity servers. In other words, your system will rely on the power of 100s of nodes to manage data.
At this scale, failures will be the norm rather than the exception. Even if we assume that one node lasts for 1000 days (roughly 3 years), in a cluster of 500 nodes there will be a failure once every 2 days.</description>
    </item>
    
  </channel>
</rss>