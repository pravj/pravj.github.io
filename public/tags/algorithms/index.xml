<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on hack(pravj)</title>
    <link>https://pravj.github.io/tags/algorithms/</link>
    <description>Recent content in Algorithms on hack(pravj)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Oct 2014 12:34:58 +0300</lastBuildDate>
    
	<atom:link href="https://pravj.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bloom Filters for Dummies</title>
      <link>https://pravj.github.io/articles/bloom-filters-for-dummies/</link>
      <pubDate>Sun, 19 Oct 2014 12:34:58 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/bloom-filters-for-dummies/</guid>
      <description>Bloom Filters is one of those data structures that you don&amp;rsquo;t generally learn about in a typical data structures 101 class, but wish you had learnt once you know about them. Despite reading several articles on bloom filters I was still finding it hard to grasp the concepts until the last week when I decided to sit down and not get up until I get the hang of it. Below is an article where I attempt to explain what I understood in a clear way (hopefully) so that others can learn.</description>
    </item>
    
    <item>
      <title>The String Rotation Problem</title>
      <link>https://pravj.github.io/articles/the-string-rotation-problem/</link>
      <pubDate>Tue, 22 Jul 2014 12:34:58 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/the-string-rotation-problem/</guid>
      <description>On a recent (rather long) flight, while I was devouring Jon Bentley&amp;rsquo;s Programming Pearls, I came across this rather interesting problem.
The problem is simple - How will you a rotate a string of length n by i steps in place i.e. without using any extra space?
  The example shown below makes it quite clear. Now the easiest way to do this is to simply save the i chars in a separate vector, shift the remaining chars by i and finally, paste the initial i items at the back.</description>
    </item>
    
  </channel>
</rss>