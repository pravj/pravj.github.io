<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flask on hack(pravj)</title>
    <link>https://pravj.github.io/tags/flask/</link>
    <description>Recent content in Flask on hack(pravj)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Jan 2015 14:37:44 +0300</lastBuildDate>
    
	<atom:link href="https://pravj.github.io/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Compile - A Python Builtin</title>
      <link>https://pravj.github.io/articles/the-compile-function/</link>
      <pubDate>Fri, 23 Jan 2015 14:37:44 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/the-compile-function/</guid>
      <description>Quick question - You have a settings.cfg file (a list of key-value pairs) and you are required to read it in your Python program as a dict? How do you do it?
I found myself thinking over this question very recently while working with a Flask app. My task was simple - query the database, generate a report and email it as an attachment.
The only catch was the fact that all these configuration parameters i.</description>
    </item>
    
    <item>
      <title>Using Blueprints</title>
      <link>https://pravj.github.io/articles/using-blueprints/</link>
      <pubDate>Thu, 08 May 2014 12:34:58 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/using-blueprints/</guid>
      <description>In today&amp;rsquo;s short lesson we&amp;rsquo;ll continue where we left off and completely wrap up the topic of code organization by learning about blueprints. Blueprints have been a rather recent addition to flask (introduced in version 0.7) and were added to help users structure large applications into reusable components.
Blueprints What exactly are blueprints? Lets see what the official documentation has to say. Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications.</description>
    </item>
    
    <item>
      <title>Flask on Nginx and Gunicorn</title>
      <link>https://pravj.github.io/articles/flask-on-nginx-and-gunicorn/</link>
      <pubDate>Fri, 07 Mar 2014 12:34:58 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/flask-on-nginx-and-gunicorn/</guid>
      <description>Even after deploying a number of Flask apps I always find myself googling up blog posts on how to get the trio of nginx, gunicorn and supervisor working together. Below is simple, straight, no-nonsense guide on how to deploy a flask app on a Linux server using Nginx, Gunicorn and Supervisor.
A disclaimer: this guide will not tell you what these technologies are. Specifically, I will not talk about why you should use nginx + gunicorn instead of apache + mod_wsgi.</description>
    </item>
    
    <item>
      <title>Class Based Views</title>
      <link>https://pravj.github.io/articles/class-based-views/</link>
      <pubDate>Thu, 09 May 2013 12:34:58 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/class-based-views/</guid>
      <description>If you&amp;rsquo;ve used Django before, one of the things that you surely miss (apart from the django-admin, of course) is class based (or generic) views. Class based views allow you to structure your views and reuse code by harnessing inheritance and mixins. This allows you to create generic views for routine tasks and simply inherit from them for similar views.
In flask 0.7 class based views were introduced which act similar to generic views in Django.</description>
    </item>
    
    <item>
      <title>Application Structure</title>
      <link>https://pravj.github.io/articles/application-structure/</link>
      <pubDate>Tue, 07 May 2013 12:34:58 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/application-structure/</guid>
      <description>In this post, we&amp;rsquo;re going to talk about a seemingly easy but an important topic - organizing and structuring your flask applications.
As mentioned earlier, getting started with flask is super easy. Unlike django, flask doesn&amp;rsquo;t follow a directory structure when you start a new app. Flask will not complain even if all of your code resides in a single main.py file. But we all know that that is not the way to go.</description>
    </item>
    
    <item>
      <title>Beginning Flask</title>
      <link>https://pravj.github.io/articles/beginning-flask/</link>
      <pubDate>Mon, 06 May 2013 12:34:58 +0300</pubDate>
      
      <guid>https://pravj.github.io/articles/beginning-flask/</guid>
      <description>I&amp;rsquo;ve been meaning to start a write a series on Flask which is a micro-framework for developing web applications in python. In Ruby parlance, flask is to Sinatra what Django is to Rails.
The nicest thing (and most confusing for beginners) about Flask is that its quite barebones on the onset. A simple hello world application in Flask is just about 7 lines as shown below. However, going from hello world to full fledged application is a daunting task in itself for a beginner.</description>
    </item>
    
  </channel>
</rss>